{"version":3,"sources":["../../../node_modules/@jspsych/plugin-html-keyboard-response/src/index.ts","../src/index.ts"],"names":["version","info"],"mappings":"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","file":"index.js","sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"html-keyboard-response\",\n  version: version,\n  parameters: {\n    /**\n     * The string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /**\n     * This array contains the key(s) that the participant is allowed to press in order to respond\n     * to the stimulus. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values this page}\n     * and\n     * {@link https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/ this page (event.key column)}\n     * for more examples. Any key presses that are not listed in the\n     * array will be ignored. The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses.\n     * Specifying `\"NO_KEYS\"` will mean that no responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * This string can contain HTML markup. Any content here will be displayed below the stimulus.\n     * The intention is that it can be used to provide a reminder about the action the participant\n     * is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus\n     * will be set to `hidden` after this time has elapsed. If this is null, then the stimulus will\n     * remain visible until the trial ends.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * How long to wait for the participant to make a response before ending the trial in milliseconds.\n     * If the participant fails to make a response before this timer is reached, the participant's response\n     * will be recorded as null for the trial and the trial will end. If the value of this parameter is null,\n     * then the trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the trial_duration parameter). If false, then the trial will\n     * continue until the value for trial_duration is reached. You can set this parameter to false to force\n     * the participant to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The HTML content that was displayed on the screen. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays HTML content and records responses generated with the keyboard.\n * The stimulus can be displayed until a response is given, or for a pre-determined amount of time.\n * The trial can be ended automatically if the participant has failed to respond within a fixed length of time.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\n */\nclass HtmlKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponsePlugin;\n","import { JsPsych } from \"jspsych\";\nimport jsPsychHtmlKeyboardResponse from '@jspsych/plugin-html-keyboard-response'\n\nexport function createTimeline(jsPsych: JsPsych,\n  stimuli: any,\n  keyboard_response: string = \"space\",          // Default key for response\n  trial_duration: number = 1000,                // Default trial duration in ms\n  post_trial_gap: number = 500,                 // Default gap between trials in ms\n  fixation_duration: number = 500,              // Default fixation duration in ms\n  n: number = 2,                                // Default value for N-back level\n  num_trials: number = 20,                      // Default number of trials\n  rep_ratio: number = 0.2, \n  debrief: boolean = false, \n  return_accuracy: boolean = false, \n  data_output: \"none\" | \"json\" | \"csv\" = \"none\") {\n\n  const trial_sequence: any[] = [];\n\n  for (var i = 0; i < num_trials; i++) {\n    if (i >= n && Math.random() < rep_ratio) {\n        trial_sequence.push(trial_sequence[i - n]);\n    } else {\n        const possible_stimuli = stimuli.filter(function (s: any) {\n          return (i < n || s !== trial_sequence[i - n]);\n        });\n        const random_stimulus = jsPsych.randomization.sampleWithoutReplacement(possible_stimuli, 1)[0];\n        trial_sequence.push(random_stimulus)\n      }\n    }\n\n  const timeline: any[] = [];\n\n  for (var i = 0; i < trial_sequence.length; i++) {\n\n    timeline.push({\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `<p style=\"font-size: 48px; color: gray;\">+</p>`,\n      choices: \"NO_KEYS\",\n      trial_duration: fixation_duration\n    });\n\n    timeline.push({\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `<p style=\"font-size: 48px;\">${trial_sequence[i]}</p>`,\n      choices: [keyboard_response],\n      trial_duration: trial_duration,\n      post_trial_gap: post_trial_gap,\n      data: { correct: i >= 2 && trial_sequence[i] === trial_sequence[i - n] },\n      on_finish: function (data: any) {\n        data.correct_response = data.correct && data.response === keyboard_response;\n        data.correct_no_response = !data.correct && data.response === null;\n      }\n    })\n  }\n\n  if (debrief){\n  if (return_accuracy){\n    timeline.push(\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n          var correct_responses = jsPsych.data.get().filter({correct_response: true}).count();\n          var correct_no_responses = jsPsych.data.get().filter({correct_no_response: true}).count();\n          var total_trials = jsPsych.data.get().count();\n          var accuracy = Math.round(((correct_responses + correct_no_responses) / total_trials) * 100);\n          return `<p>Thank you for participating!</p>\n            <p>You correctly responded to <strong>${correct_responses}</strong> matching trials.</p>\n            <p>You correctly not responded to <strong>${correct_no_responses}</strong> non-matching trials.</p>\n            <p>Your accuracy was <strong>${accuracy}%</strong>.</p>\n            <p>Press any key to finish the experiment.</p>`;\n        },\n        choices: \"NO_KEYS\",\n        on_start: function () {\n          if (data_output == \"csv\"){\n          jsPsych.data.get().localSave('csv', `n_back.csv`);} else if (data_output == \"json\") {\n            jsPsych.data.get().localSave('json', `n_back.json`);\n          }\n        },\n        simulation_options: {\n          simulate: false\n        }\n      })\n  } else {\n    timeline.push(\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n          return `<p>Thank you for participating!</p>\n            <p>Press any key to finish the experiment.</p>`;\n        },\n        choices: \"NO_KEYS\",\n        on_start: function () {\n          if (data_output == \"csv\"){\n            jsPsych.data.get().localSave('csv', `n_back.csv`);} else if (data_output == \"json\") {\n              jsPsych.data.get().localSave('json', `n_back.json`);\n            }\n        },\n        simulation_options: {\n          simulate: false\n        }\n      })\n  }}\n\n  return timeline\n}"]}